@using UASATE.Web.Services

@inject IDestinasiWisataService DestinasiWisataService

@{
    ViewData["Title"] = "Home Page";
    var daftarWisataDestinasi = DestinasiWisataService.GetAll();
}

<div class="main-content">
    <div class="row mb-3 d-flex justify-content-center">
        <div class="col">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                <i class="fa fa-user"></i>
                Nama Anggota
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-6 pr-0">
            <label class="form-label">Pilih Tempat Wisata yang Ingin Dikunjungi</label>
            <select id="end" class="form-control select2" multiple>
                @foreach (var destinasiWisata in daftarWisataDestinasi)
                {
                    <option value="@destinasiWisata.Nama">@destinasiWisata.Nama</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-6 mt-3">
            Total Cost : <span id="cost"></span><span> Km</span>
        </div>
        <div class="col-sm-12 col-md-6 mt-3">
            Jalur : <span id="path"></span>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 mt-3">
            <button class="btn btn-primary" id="djikstra">Cari Rute</button>
        </div>
    </div>

    <hr>

    <div id="map" class="mt-3"></div>

    <div class="row">
        <h4>Populasi Awal</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <td>No</td>
                    <td>Individu (Encoded)</td>
                    <td>Individu (Decoded)</td>
                    <td>Fitness</td>
                </tr>
            </thead>
            <tbody id="populasiAwal">
            </tbody>
        </table>
    </div>

    <div class="row">
        <h4>Populasi Akhir</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <td>No</td>
                    <td>Individu (Encoded)</td>
                    <td>Individu (Decoded)</td>
                    <td>Fitness</td>
                </tr>
            </thead>
            <tbody id="populasiAkhir">
            </tbody>
        </table>
    </div>

    <div class="row">
        <h4>Local Best</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <td>Generasi</td>
                    <td>Individu (Encoded)</td>
                    <td>Individu (Decoded)</td>
                    <td>Fitness</td>
                </tr>
            </thead>
            <tbody id="localBest">
            </tbody>
        </table>
    </div>

    <div class="row">
        <h4>Hasil Tes</h4>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <td>F</td>
                    <td>CR</td>
                    <td>n</td>
                    <td>Mean Global Fitness</td>
                    <td>Mean Jumlah Generasi</td>
                </tr>
            </thead>
            <tbody id="hasilTes">
            </tbody>
        </table>
    </div>
</div>

<style>
    #map {
        width: 100%;
        height: 600px; /* Sesuaikan untuk layar kecil */
    }

    .col {
        padding-right: 0;
    }

    /* HTML marker styles */
    .price-tag {
        background-color: #4285F4;
        border-radius: 8px;
        color: #FFFFFF;
        font-size: 14px;
        padding: 10px 15px;
        position: relative;
        font-size: 0.6em;
    }

        .price-tag::after {
            content: "";
            position: absolute;
            left: 50%;
            top: 100%;
            transform: translate(-50%, 0);
            width: 0;
            height: 0;
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 8px solid #4285F4;
        }
</style>

@section Scripts {
    <partial name="_MapsApiPartial" />
    <partial name="_DataTablePartial" />

    <script type="text/javascript">
        const buttonDjikstra = $("button#djikstra");
        const selectEnd = $("select#end");
        const spanCost = $("span#cost");
        const spanPath = $("span#path");
        const tablePopulasiAwal = $('#populasiAwal');
        const tablePopulasiAkhir = $('#populasiAkhir');
        const tableLocalBest = $('#localBest');
        const tableHasilTes = $('#hasilTes');
        let map;
        let featureLayer;

        async function initMap() {
            let daftarDestinasi;
            let daftarEdges;

            const response = await fetch("/destinasi-wisata");
            if (response.ok) {
                daftarDestinasi = await response.json();
            }

            const responseEdge = await fetch("/destinasi-wisata/edges");
            if (responseEdge.ok) {
                daftarEdges = await responseEdge.json();
            }

            const pos = { lat: - 10.17696822001329, lng: 123.60338374889992 };

            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

            // The map, centered at Uluru
            map = new Map(document.getElementById("map"), {
                zoom: 13,
                center: pos,
                mapId: "3e8984c4ea81cbad"
            });

            // featureLayer = map.getFeatureLayer("ADMINISTRATIVE_AREA_LEVEL_2");
            // const featureStyleOptions = {
            //     strokeColor: "#810FCB",
            //     strokeOpacity: 1.0,
            //     strokeWeight: 3.0,
            //     fillColor: "#810FCB",
            //     fillOpacity: 0.1,
            // };
            // featureLayer.style = (options) => {
            //     if (options.feature.placeId == "ChIJt2h8DSabViwRVWssMPDUjcY") {
            //         return featureStyleOptions;
            //     }
            // };

            const directionsService = new google.maps.DirectionsService();

            // The marker, positioned at Uluru
            const markers = [];
            const infoWindows = [];

            for (let destinasi of daftarDestinasi) {
                const contentString =
                    '<div id="content">' +
                    '<div id="siteNotice">' +
                    "</div>" +
                    '<h4 id="firstHeading" class="firstHeading">' + destinasi.nama + '</h4>' +
                    '<div id="bodyContent">' +
                    "</div>" +
                    "</div>";

                const infoWindow = new google.maps.InfoWindow({
                    ariaLabel: destinasi.nama,
                    content: contentString
                });

                const m = new AdvancedMarkerElement({
                    map: map,
                    position: { lat: destinasi.titikKoordinat.x, lng: destinasi.titikKoordinat.y },
                    title: destinasi.nama
                });

                m.addListener("click", () => {
                    for (let i of infoWindows) i.close();

                    infoWindow.open({
                        anchor: m,
                        map
                    });
                });

                infoWindow.addListener("visible", () => infoWindow.focus());

                map.addListener("click", () => infoWindow.close());

                markers.push(m);
                infoWindows.push(infoWindow)
            }

            const directionsRenderers = [];
            for (let edge of daftarEdges) {
                const line = [
                    { lat: edge.v1.value.titikKoordinat.x, lng: edge.v1.value.titikKoordinat.y },
                    { lat: edge.v2.value.titikKoordinat.x, lng: edge.v2.value.titikKoordinat.y }
                ];

                const request = {
                    origin: line[0],
                    destination: line[1],
                    travelMode: 'DRIVING',
                    unitSystem: google.maps.UnitSystem.METRIC
                };

                directionsService.route(request, function (result, status) {
                    if (status == 'OK') {
                        const directionsRenderer = new google.maps.DirectionsRenderer({
                            markerOptions: { visible: false },
                            preserveViewport: true
                        });

                        fetch('/destinasi-wisata',
                            {
                                method: 'POST',
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({ A: edge.v1.value.nama, B: edge.v2.value.nama, Distance: result.routes[0].legs[0].distance.value / 1000 })
                            })

                        directionsRenderer.setMap(map);
                        directionsRenderer.setDirections(result);
                        directionsRenderers.push(directionsRenderer);
                    }
                });
            }

            buttonDjikstra.on('click', async function () {
                const ends = selectEnd.val();
                const responsePath = await fetch("/destinasi-wisata/lintasan?d=" + ends.map(e => e.replace('\w+', '+20')).join('&d='));

                if (responsePath.ok) {
                    const result = await responsePath.json();

                    for (let d of directionsRenderers) {
                        d.setMap(null);
                    }

                    directionsRenderers.length = 0;
                    let pathString = "";

                    for (let i = 0; i < result.lintasan.length; i++) {

                        const des1 = result.lintasan[i];
                        let des2 = result.lintasan[i];

                        if (i < result.lintasan.length - 1) des2 = result.lintasan[i + 1];
                        else des2 = result.lintasan[0];

                        const line = [
                            { lat: des1.titikKoordinat.x, lng: des1.titikKoordinat.y },
                            { lat: des2.titikKoordinat.x, lng: des2.titikKoordinat.y }
                        ];

                        const request = {
                            origin: line[0],
                            destination: line[1],
                            travelMode: 'DRIVING',
                            unitSystem: google.maps.UnitSystem.METRIC
                        };

                        directionsService.route(request, function (result, status) {
                            if (status == 'OK') {
                                const directionsRenderer = new google.maps.DirectionsRenderer({
                                    markerOptions: { visible: false },
                                    preserveViewport: true
                                });
                                directionsRenderer.setMap(map);
                                directionsRenderer.setDirections(result);
                                directionsRenderers.push(directionsRenderer);
                            }
                        });

                        pathString += `${des1.nama}`;

                        if (i != result.lintasan.length - 1) {
                            pathString += " - ";
                        } else {
                            pathString += ` - ${des2.nama}`;
                        }
                    }

                    tablePopulasiAwal.html('');
                    tablePopulasiAkhir.html('');

                    new DataTable(tablePopulasiAwal.parent()).destroy();
                    new DataTable(tablePopulasiAkhir.parent()).destroy();
                    new DataTable(tableLocalBest.parent()).destroy();

                    for (let i = 0; i < result.jumlahPopulasi; i++) {
                        tablePopulasiAwal.append(`<tr>
                            <td>${i + 1}</td>
                            <td>${result.populasiAwal[i]}</td>
                            <td>${result.populasiAwalDecoded[i].join(', ')}</td>
                            <td>${result.populasiAwalFitness[i]}</td>
                        </tr>`)

                        tablePopulasiAkhir.append(`<tr>
                            <td>${i + 1}</td>
                            <td>${result.populasiAkhir[i]}</td>
                            <td>${result.populasiAkhirDecoded[i].join(', ')}</td>
                            <td>${result.populasiAkhirFitness[i]}</td>
                        </tr>`)
                    }

                    tableLocalBest.html('');
                    for (let i = 0; i < result.jumlahGenerasi; i++) {
                        tableLocalBest.append(`<tr>
                            <td>${i + 1}</td>
                            <td>${result.localBests[i]}</td>
                            <td>${result.localBestsDecoded[i].join(', ')}</td>
                            <td>${result.localBestsFitness[i]}</td>
                        </tr>`)
                    }

                    // tableHasilTes.html('');
                    // for (let i = 0; i < result.hasilTes.length; i++) {
                    //     tableHasilTes.append(`<tr>
                    //         <td>${i + 1}</td>
                    //         <td>${result.hasilTes[i].f}</td>
                    //         <td>${result.hasilTes[i].cr}</td>
                    //         <td>${result.hasilTes[i].n}</td>
                    //         <td>${result.hasilTes[i].mGlobal}</td>
                    //         <td>${result.hasilTes[i].mGenerasi}</td>
                    //     </tr>`)
                    // }

                    $('.table').DataTable();

                    spanCost.html(result.totalJarak);
                    spanPath.html(pathString);
                }
            });
        }

        initMap();
    </script>
    <script>
        $(document).ready(function () {
            $('.select2').select2({
                // Tombol untuk menghapus pilihan
            });
        });
        $(document).ready(function () {
            // Hanya untuk elemen Select2 dengan atribut multiple
            $('select.select2[multiple]').select2({
                placeholder: " Pilih Kelurahan...",
                closeOnSelect: false,
                allowClear: true
            });
        });
    </script>
}